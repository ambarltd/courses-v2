services:

  frontend-app:
    container_name: frontend-app
    build:
      context: ./../application/frontend-javascript/
    restart: always
    environment:
      DOMAIN_IDENTITY: "http://172.30.0.106:8080"
      DOMAIN_SECURITY: "http://172.30.0.106:8080"
      DOMAIN_CREDIT_CARD_PRODUCT: "http://172.30.0.106:8080"
      POSTGRES_DATABASE_URL: "postgresql://my_es_username:my_es_password@172.30.0.107:5432/my_es_database?schema=public"
      MONGODB_DATABASE_URL: "mongodb://my_mongo_username:my_mongo_password@172.30.0.108:27017/projections?authSource=admin"
    depends_on:
      backend-php:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --server-response --timeout=5 http://localhost:8080 2>&1 | grep '200 OK'" ]
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 3s
    volumes:
      - ./ambar-config.yaml:/ambar-yml/ambar-config.yaml:ro
    networks:
      development:
        ipv4_address: 172.30.0.105
    expose:
      - 8080
    ports:
      - "8080:8080"

  backend-php:
    container_name: backend-php
    build:
      context: ./../application/backend-php
    restart: always
    environment:
      EVENT_STORE_HOST: "172.30.0.107"
      EVENT_STORE_PORT: 5432
      EVENT_STORE_DATABASE_NAME: "my_es_database"
      EVENT_STORE_USER: "my_es_username"
      EVENT_STORE_PASSWORD: "my_es_password"
      EVENT_STORE_CREATE_TABLE_WITH_NAME: "event_store"
      EVENT_STORE_CREATE_REPLICATION_USER_WITH_USERNAME: "replication_username"
      EVENT_STORE_CREATE_REPLICATION_USER_WITH_PASSWORD: "replication_password"
      EVENT_STORE_CREATE_REPLICATION_PUBLICATION: "replication_publication"
      MONGODB_PROJECTION_HOST: "172.30.0.108"
      MONGODB_PROJECTION_PORT: 27017
      MONGODB_PROJECTION_AUTHENTICATION_DATABASE: "admin"
      MONGODB_PROJECTION_DATABASE_NAME: "projections"
      MONGODB_PROJECTION_DATABASE_USERNAME: "my_mongo_username"
      MONGODB_PROJECTION_DATABASE_PASSWORD: "my_mongo_password"
      SESSION_TOKENS_EXPIRE_AFTER_SECONDS: 3600
    depends_on:
      postgres-event-store:
        condition: service_healthy    
      mongo-projection:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --server-response --timeout=5 http://localhost:8080?docker_healthcheck=true 2>&1 | grep '200 OK'"]
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 5s
    expose:
      - 8080
    networks:
      development:
        ipv4_address: 172.30.0.106

  postgres-event-store:
    image: postgres:16.4
    container_name: postgres-event-store
    restart: always
    volumes:
      - ./data/postgres-event-store/pg-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: my_es_username
      POSTGRES_DB: my_es_database
      POSTGRES_PASSWORD: my_es_password
    command: postgres -c wal_level=logical
    healthcheck:
      test: [ "CMD-SHELL", "PGPASSWORD=my_es_password psql -U my_es_username -d my_es_database -h localhost -c 'SELECT 1;'" ]
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 5s
    expose:
      - 5432
    networks:
      development:
        ipv4_address: 172.30.0.107

  mongo-projection:
    image: mongo:7.0.14
    container_name: mongo-projection
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: my_mongo_username
      MONGO_INITDB_ROOT_PASSWORD: my_mongo_password
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'mongosh --username my_mongo_username --password my_mongo_password
            --authenticationDatabase admin --host 172.30.0.108 --eval
            "try { rs.status() } catch (err) { rs.initiate({_id:\"rs0\",members:[{_id:0,host:\"172.30.0.108:27017\"}]})}"
            | grep "votingMembersCount: 1"'
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 70s
      start_interval: 3s
    entrypoint:
      - "sh"
      - "-c"
      - "[ ! -f /data/db/entrypoint-finished ] && (
          timeout 40s /usr/local/bin/docker-entrypoint.sh mongod
          || (
            touch /data/db/entrypoint-finished &&
            cp /keyfile/mongo.key /data/configdb/mongo.key && chmod 600 /data/configdb/mongo.key &&
            mongod --replSet rs0 --bind_ip 172.30.0.108 --keyFile /data/configdb/mongo.key --auth
          )
        ) 
        || (
          cp /keyfile/mongo.key /data/configdb/mongo.key && chmod 600 /data/configdb/mongo.key &&
          mongod --replSet rs0 --bind_ip 172.30.0.108 --keyFile /data/configdb/mongo.key --auth
        )"
    volumes:
      - ./docker-build/mongo/mongo.key:/keyfile/mongo.key:ro
      - ./data/mongo-projection/db-data:/data/db
      - ./data/mongo-projection/db-config:/data/configdb
    expose:
      - 27017
    networks:
      development:
        ipv4_address: 172.30.0.108

  ambar-emulator:
    image: ambarltd/emulator:v1.4-multiarch
    container_name: ambar-emulator
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "ls", "/root/.local/share/ambar-emulator/state.json" ]
      timeout: 5s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 5s
    volumes:
      - ./ambar-config.yaml:/opt/emulator/config/config.yaml
      - ./data/ambar-emulator:/root/.local/share/ambar-emulator
    depends_on:
      backend-php:
        condition: service_healthy
    networks:
      development:
        ipv4_address: 172.30.0.199

  frontend-database-explorer-postgres:
    container_name: frontend-database-explorer-postgres
    build:
      context: docker-build/frontend-database-explorer
      args:
        - DB_TYPE=postgres
        - STUDIO_PORT=5555
    restart: always
    environment:
      DB_TYPE: postgres
      STUDIO_PORT: 8081
      POSTGRES_DATABASE_URL: "postgresql://my_es_username:my_es_password@172.30.0.107:5432/my_es_database?schema=public"
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --server-response --timeout=5 http://localhost:8081 2>&1 | grep '200 OK'" ]
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 3s
    depends_on:
      postgres-event-store:
        condition: service_healthy
    networks:
      development:
        ipv4_address: 172.30.0.211
    ports:
      - "8081:8081"

  frontend-database-explorer-mongo:
    container_name: frontend-database-explorer-mongo
    build:
      context: docker-build/frontend-database-explorer
      args:
        - DB_TYPE=mongo
        - STUDIO_PORT=5556
    restart: always
    environment:
      DB_TYPE: mongo
      STUDIO_PORT: 8082
      MONGO_DATABASE_URL: "mongodb://my_mongo_username:my_mongo_password@172.30.0.108:27017/projections?authSource=admin"
    depends_on:
      mongo-projection:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --spider --server-response --timeout=5 http://localhost:8082 2>&1 | grep '200 OK'" ]
      timeout: 2s
      interval: 60s
      retries: 10
      start_period: 20s
      start_interval: 3s
    networks:
      development:
        ipv4_address: 172.30.0.212
    ports:
      - "8082:8082"


networks:
    development:
        driver: bridge
        ipam:
            config:
                - subnet: 172.30.0.0/24
